{
  "templates": [
    {
      "id": "recon-notes",
      "name": "Reconnaissance Notes",
      "category": "recon",
      "content": "# Reconnaissance - {target}\n\n**Date:** {date}\n**Target:** {target}\n**Scope:** {scope}\n\n## Subdomains Discovered\n- subdomain1.target.com\n- subdomain2.target.com\n\n## IP Addresses\n- 192.168.1.1 (main server)\n- 192.168.1.2 (CDN)\n\n## Technologies Identified\n- **Web Server:** nginx 1.18.0\n- **Framework:** React.js\n- **Backend:** Node.js\n- **Database:** MongoDB (assumed)\n- **CDN:** Cloudflare\n\n## Open Ports\n| Port | Service | Version | Notes |\n|------|---------|---------|-------|\n| 80   | HTTP    | nginx   | Redirects to HTTPS |\n| 443  | HTTPS   | nginx   | Main application |\n| 3306 | MySQL   | 5.7     | Should not be public! |\n\n## Interesting Findings\n- [ ] Admin panel at /admin (needs creds)\n- [ ] API documentation at /api/docs\n- [ ] Old version at v1.target.com\n- [ ] Development server at dev.target.com\n\n## Next Steps\n- Test authentication on admin panel\n- Enumerate API endpoints\n- Check old version for vulnerabilities\n- Test dev environment\n\n## References\n- Subdomain list: subdomains.txt\n- Nmap scan: nmap-results.xml\n- Screenshots: /screenshots/\n",
      "tags": ["reconnaissance", "enumeration", "discovery"]
    },
    {
      "id": "vulnerability-notes",
      "name": "Vulnerability Notes",
      "category": "testing",
      "content": "# Vulnerability: {vulnerability_type}\n\n**Discovered:** {date}\n**Severity:** {severity}\n**Status:** {status}\n**Endpoint:** {endpoint}\n\n## Summary\nBrief description of the vulnerability found.\n\n## Technical Details\n- **Parameter:** {parameter}\n- **Method:** {method}\n- **Payload:** `{payload}`\n\n## Steps to Reproduce\n1. Navigate to {url}\n2. Inject payload into {parameter}\n3. Observe {result}\n\n## Proof of Concept\n```http\nGET /endpoint?param=payload HTTP/1.1\nHost: target.com\n```\n\n## Impact\nDescribe the potential impact of this vulnerability.\n\n## Evidence\n- Screenshot: {screenshot_path}\n- Video: {video_path}\n- Burp request/response: {burp_file}\n\n## Remediation\nSuggested fix for the vulnerability.\n\n## CVSS Score\n**Score:** {cvss_score}\n**Vector:** {cvss_vector}\n\n## References\n- OWASP: {owasp_link}\n- CWE: {cwe_link}\n\n## Related Issues\n- See also: {related_vulnerability}\n\n## Status Updates\n- {date}: Discovered\n- {date}: Reported to vendor\n- {date}: Vendor acknowledged\n- {date}: Fix deployed\n",
      "tags": ["vulnerability", "finding", "bug"]
    },
    {
      "id": "meeting-notes",
      "name": "Meeting/Call Notes",
      "category": "general",
      "content": "# Meeting Notes - {topic}\n\n**Date:** {date}\n**Time:** {time}\n**Participants:** {participants}\n**Type:** {meeting_type}\n\n## Agenda\n1. Topic 1\n2. Topic 2\n3. Topic 3\n\n## Discussion Points\n\n### Topic 1: {topic_name}\n- Key point 1\n- Key point 2\n- Decision: \n\n### Topic 2: {topic_name}\n- Key point 1\n- Key point 2\n- Decision: \n\n## Action Items\n- [ ] **{person}:** Task description (Due: {date})\n- [ ] **{person}:** Task description (Due: {date})\n\n## Decisions Made\n1. Decision 1\n2. Decision 2\n\n## Next Meeting\n- **Date:** {next_date}\n- **Agenda:** {next_agenda}\n\n## Notes\nAdditional notes and comments.\n",
      "tags": ["meeting", "communication"]
    },
    {
      "id": "api-endpoint-notes",
      "name": "API Endpoint Documentation",
      "category": "testing",
      "content": "# API Endpoint: {endpoint_name}\n\n**URL:** `{method} {url}`\n**Authentication:** {auth_type}\n**Discovered:** {date}\n\n## Description\nBrief description of what this endpoint does.\n\n## Request\n\n### Headers\n```http\nAuthorization: Bearer {token}\nContent-Type: application/json\n```\n\n### Parameters\n| Name | Type | Required | Description |\n|------|------|----------|-------------|\n| id   | int  | Yes      | User ID     |\n| name | str  | No       | User name   |\n\n### Request Body\n```json\n{\n  \"field1\": \"value1\",\n  \"field2\": \"value2\"\n}\n```\n\n## Response\n\n### Success (200)\n```json\n{\n  \"status\": \"success\",\n  \"data\": {\n    \"id\": 123,\n    \"name\": \"Test User\"\n  }\n}\n```\n\n### Error (400)\n```json\n{\n  \"status\": \"error\",\n  \"message\": \"Invalid request\"\n}\n```\n\n## Security Testing Results\n\n### Authentication\n- [x] Requires valid token\n- [ ] Token validation is proper\n- [ ] No token bypass found\n\n### Authorization\n- [ ] IDOR vulnerability found ⚠️\n- [ ] Users can access others' data\n- [ ] See writeup: IDOR-{id}\n\n### Input Validation\n- [x] SQL injection - not vulnerable\n- [ ] XSS - testing in progress\n- [ ] Command injection - not tested\n\n### Rate Limiting\n- [ ] No rate limiting implemented ⚠️\n- [ ] Can be abused for DoS\n\n## Test Cases\n1. Test with invalid token\n2. Test with expired token\n3. Test IDOR by changing ID parameter\n4. Test injection in all parameters\n5. Test rate limiting\n\n## Notes\n- This endpoint is vulnerable to IDOR\n- Created writeup: WRITEUP-{id}\n- Reported on: {date}\n",
      "tags": ["api", "endpoint", "testing"]
    },
    {
      "id": "exploit-development",
      "name": "Exploit Development Notes",
      "category": "exploitation",
      "content": "# Exploit Development: {vulnerability_name}\n\n**Target:** {target}\n**Vulnerability Type:** {vuln_type}\n**CVE:** {cve_id}\n**Date Started:** {date}\n\n## Vulnerability Analysis\n\n### Root Cause\nDescription of the underlying vulnerability.\n\n### Affected Code\n```python\n# Vulnerable code snippet\ndef vulnerable_function(user_input):\n    eval(user_input)  # Dangerous!\n```\n\n### Conditions Required\n- Condition 1\n- Condition 2\n- Condition 3\n\n## Exploit Strategy\n\n### Attack Vector\nDescription of how to trigger the vulnerability.\n\n### Constraints\n- Input length limit: {limit}\n- Filtered characters: {filtered_chars}\n- Encoding: {encoding}\n\n### Payload Development\n\n#### Version 1 (Failed)\n```\npayload_v1 = \"...\"\nReason for failure: ...\n```\n\n#### Version 2 (Partial Success)\n```\npayload_v2 = \"...\"\nResult: ...\n```\n\n#### Final Payload (Working)\n```python\npayload = \"...\"\n```\n\n## Exploitation Process\n\n### Step 1: Preparation\n- Set up listener: `nc -lvnp 4444`\n- Prepare payload\n\n### Step 2: Delivery\n```bash\n# Delivery command\ncurl -X POST http://target/vulnerable -d \"payload\"\n```\n\n### Step 3: Execution\n- Payload executes\n- Shell obtained\n\n### Step 4: Post-Exploitation\n- Privilege escalation\n- Persistence\n- Lateral movement\n\n## Testing Results\n\n| Environment | Status | Notes |\n|-------------|--------|-------|\n| Development | ✅ Success | Full RCE |\n| Staging | ✅ Success | Full RCE |\n| Production | ⚠️ Not Tested | Waiting for approval |\n\n## Mitigation Bypass\n\n### WAF Bypass\n- Technique: {technique}\n- Payload: {payload}\n- Status: {status}\n\n### Input Validation Bypass\n- Filter: {filter}\n- Bypass: {bypass}\n- Working: {yes/no}\n\n## Proof of Concept\n\n```python\n#!/usr/bin/env python3\nimport requests\n\ntarget = \"http://target.com/vulnerable\"\npayload = {\"input\": \"malicious_payload\"}\n\nresponse = requests.post(target, json=payload)\nprint(response.text)\n```\n\n## Screenshots\n- Initial access: {screenshot1}\n- Privilege escalation: {screenshot2}\n- Proof: {screenshot3}\n\n## References\n- CVE Details: {link}\n- Original Advisory: {link}\n- Similar Exploits: {link}\n\n## Timeline\n- {date}: Vulnerability discovered\n- {date}: Exploit development started\n- {date}: Working PoC created\n- {date}: Reported to vendor\n- {date}: Patch released\n",
      "tags": ["exploit", "development", "poc"]
    },
    {
      "id": "bug-bounty-submission",
      "name": "Bug Bounty Submission",
      "category": "reporting",
      "content": "# Bug Bounty Report: {title}\n\n**Program:** {program_name}\n**Submitted:** {date}\n**Status:** {status}\n**Severity:** {severity}\n**Bounty:** {bounty_amount}\n\n## Vulnerability Summary\nClear, concise summary of the vulnerability.\n\n## Severity Assessment\n\n**CVSS Score:** {cvss_score}\n**Rating:** {critical/high/medium/low}\n\n**Justification:**\n- Impact: {impact_level}\n- Exploitability: {ease_of_exploitation}\n- Affected Users: {user_count}\n\n## Steps to Reproduce\n\n1. Go to {url}\n2. Login with credentials\n3. Navigate to {page}\n4. Inject payload: `{payload}`\n5. Observe {result}\n\n## Proof of Concept\n\n### Request\n```http\nPOST /api/endpoint HTTP/1.1\nHost: target.com\nContent-Type: application/json\n\n{\"param\": \"malicious_value\"}\n```\n\n### Response\n```http\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\"result\": \"compromised_data\"}\n```\n\n## Impact\n\nDetailed explanation of security impact:\n- Confidentiality: {impact}\n- Integrity: {impact}\n- Availability: {impact}\n\n**Business Impact:**\n- Data breach potential\n- User account compromise\n- Regulatory compliance issues\n\n## Supporting Evidence\n\n### Screenshots\n1. {screenshot1_description}\n   ![Screenshot 1](path/to/screenshot1.png)\n\n2. {screenshot2_description}\n   ![Screenshot 2](path/to/screenshot2.png)\n\n### Video\nDemo video: {video_link}\n\n## Affected Assets\n- {asset1}\n- {asset2}\n- {asset3}\n\n## Recommended Remediation\n\n### Short-term:\n1. Immediate action item 1\n2. Immediate action item 2\n\n### Long-term:\n1. Permanent fix 1\n2. Permanent fix 2\n\n### Code Example:\n```python\n# Secure implementation\ndef secure_function(user_input):\n    sanitized = sanitize_input(user_input)\n    return process(sanitized)\n```\n\n## References\n- OWASP: {link}\n- CWE: {link}\n- Similar CVE: {link}\n\n## Disclosure Timeline\n- {date}: Vulnerability discovered\n- {date}: Report submitted\n- {date}: Vendor acknowledged\n- {date}: Fix deployed\n- {date}: Bounty awarded\n- {date}: Public disclosure (if applicable)\n\n## Communication Log\n\n### {date} - Initial Report\nSubmitted report via platform.\n\n### {date} - Vendor Response\n> \"Thank you for the report. We're investigating...\"\n\n### {date} - Status Update\n> \"Fix has been deployed to production.\"\n\n### {date} - Bounty Award\nAwarded: ${amount}\n\n## Lessons Learned\n- Technique that worked\n- What to try next time\n- Tools that were helpful\n\n## Related Reports\n- Similar vulnerability: {link}\n- Follow-up finding: {link}\n",
      "tags": ["bug-bounty", "report", "submission"]
    },
    {
      "id": "tool-notes",
      "name": "Tool Usage & Commands",
      "category": "reference",
      "content": "# Tool Reference: {tool_name}\n\n**Purpose:** {purpose}\n**Installation:** {install_command}\n**Documentation:** {docs_link}\n\n## Common Commands\n\n### Basic Usage\n```bash\n# Basic scan\n{tool} -target {target}\n\n# With options\n{tool} -target {target} -option1 -option2\n```\n\n### Advanced Usage\n```bash\n# Advanced scan with custom wordlist\n{tool} -target {target} -wordlist /path/to/wordlist.txt -threads 50\n\n# Output to file\n{tool} -target {target} -output results.txt\n```\n\n## Useful Flags\n\n| Flag | Description | Example |\n|------|-------------|----------|\n| -t   | Target URL  | -t https://example.com |\n| -w   | Wordlist    | -w /usr/share/wordlists/common.txt |\n| -o   | Output file | -o results.json |\n\n## Examples for This Target\n\n### Subdomain Enumeration\n```bash\nsubfinder -d target.com -o subdomains.txt\n```\n\n### Port Scanning\n```bash\nnmap -iL hosts.txt -p- -oA scan-results\n```\n\n### Directory Bruteforce\n```bash\nffuf -u https://target.com/FUZZ -w wordlist.txt -mc 200,301,302,403\n```\n\n## Tips & Tricks\n\n1. **Tip 1:** Description of useful tip\n2. **Tip 2:** Another helpful technique\n3. **Tip 3:** Advanced usage pattern\n\n## Common Issues\n\n### Issue 1: {issue_description}\n**Solution:**\n```bash\n# Fix command\n{fix_command}\n```\n\n### Issue 2: {issue_description}\n**Solution:** Description of how to resolve.\n\n## Results from This Project\n\n### Scan 1 - {date}\n```\nCommand: {command}\nResults: {summary}\nInteresting findings: {findings}\n```\n\n### Scan 2 - {date}\n```\nCommand: {command}\nResults: {summary}\nInteresting findings: {findings}\n```\n\n## Integration with Other Tools\n\n```bash\n# Chain with other tools\n{tool1} {args} | {tool2} {args} | {tool3} {args}\n```\n\n## References\n- Official docs: {link}\n- Cheat sheet: {link}\n- Tutorial: {link}\n",
      "tags": ["tools", "reference", "commands"]
    }
  ]
}
